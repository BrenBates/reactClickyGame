{"version":3,"sources":["components/VampCard/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","App.js","index.js"],"names":["VampCard","props","className","alt","name","src","image","onClick","handleClick","id","Wrapper","children","Header","headerText","score","topScore","Footer","App","state","vampires","vampireID","console","log","vampArr","i","length","clicked","setState","update","$set","shuffleArray","array","j","Math","floor","random","temp","characterCards","this","map","vampire","key","shuffledCards","React","Component","ReactDOM","render","document","getElementById"],"mappings":"u2FAceA,MAXf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,U,MCAxEC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,eCU1BC,MAVf,SAAgBX,GACd,OACE,yBAAKC,UAAU,UACX,uBAAGO,GAAG,cAAN,uBAAuC,kBAAC,IAAD,OAC7C,uBAAGA,GAAG,gBAAgBR,EAAMY,YACtB,uBAAGJ,GAAG,eAAN,UAA4BR,EAAMa,MAAlC,iBAAuDb,EAAMc,Y,gBCGtDC,MARf,WACE,OACE,yBAAKd,UAAU,UACX,uBAAGO,GAAG,cAAN,uBAAuC,kBAAC,IAAD,S,wBCoHhCQ,G,iNAjHbC,MAAQ,CACLH,SAAU,EACVD,MAAO,EACPD,WAAY,oCACZM,Y,EAKLX,YAAc,SAAAY,GAEZC,QAAQC,IAAIF,GASZ,IAPA,IAAIG,EAAU,EAAKL,MAAMC,SAOjBK,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAE9BJ,IAAcG,EAAQC,GAAGf,MAEA,IAAvBc,EAAQC,GAAGE,QAEZ,EAAKC,SAAS,CACZb,MAAQ,EAAKI,MAAMJ,MAAQ,EAC3BK,SAAUS,IAAO,EAAKV,MAAMC,SAAZ,eAAwBK,EAAI,CAACE,QAAS,CAACG,MAAM,MAC7DhB,WAAY,0BAMX,EAAKK,MAAMJ,MAAQ,EAAKI,MAAMH,UAC/B,EAAKY,SAAS,CACZZ,SAAU,EAAKG,MAAMJ,MACrBA,MAAO,EACPD,WAAY,yBACZM,aAEF,WACEE,QAAQC,IAAI,6BAKb,EAAKJ,MAAMJ,OAAS,EAAKI,MAAMH,UAChC,EAAKY,SAAS,CACZb,MAAO,EACPD,WAAY,yBACZM,aAEF,WACEE,QAAQC,IAAI,4C,EAaxBQ,aAAe,SAAAC,GAEb,IADA,IAAIP,EAAIO,EAAMN,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAMQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAI,IACpCY,EAAOL,EAAMP,GACnBO,EAAMP,GAAKO,EAAMC,GACjBD,EAAMC,GAAKI,EAEb,OAAOL,G,wEAGG,IAAD,OAIHM,EAAiBC,KAAKpB,MAAMC,SAASoB,KAAI,SAACC,GAAD,OAC3C,kBAAC,EAAD,CACEpC,KAAQoC,EAAQpC,KAChBE,MAASkC,EAAQlC,MACjBmC,IAAOD,EAAQ/B,GACfA,GAAM+B,EAAQ/B,GACdD,YAAe,EAAKA,iBAMpBkC,EAAgBJ,KAAKR,aAAaO,GAEtC,OAEA,6BAEA,kBAAC,EAAD,CAAQvB,MAAOwB,KAAKpB,MAAMJ,MAAOC,SAAYuB,KAAKpB,MAAMH,SAAUF,WAAcyB,KAAKpB,MAAML,aACzF,kBAAC,EAAD,KACG6B,GAEL,kBAAC,EAAD,W,GA1GcC,IAAMC,Y,MCJxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.244acfc1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction VampCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.handleClick(props.id)} />\n      </div>\n     \n    </div>\n  );\n}\n\nexport default VampCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { GiVampireCape } from \"react-icons/gi\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"header\">\r\n        <p id=\"headerLeft\">Vampire Clicky Game <GiVampireCape/></p>\r\n  <p id=\"headerMiddle\">{props.headerText}</p>\r\n        <p id=\"headerRight\">Score: {props.score} | Top Score: {props.topScore}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {FaReact} from 'react-icons/fa';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n        <p id=\"footerLeft\">Vampire Clicky Game <FaReact /></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport VampCard from \"./components/VampCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport vampires from \"./vampires.json\";\nimport update from \"immutability-helper\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n     topScore: 0,\n     score: 0,\n     headerText: \"Don't click the same image twice!\",\n     vampires\n  }\n\n\n// On click function to handle each time a vampire card is clicked on.\nhandleClick = vampireID => {\n\n  console.log(vampireID)\n\n  let vampArr = this.state.vampires;\n\n  // iterate through the vamp array to see if the vampire that was clicked\n  // has already been clicked.  If it hasn't, then increase score. If it has,\n  // then compare old top score to current score.  If current score > top score replace top score. \n  // Reset score and then vampires clicked state to false\n\n  for(let i = 0; i < vampArr.length; i++) {\n\n    if(vampireID === vampArr[i].id) {\n\n      if(vampArr[i].clicked === false){\n         \n        this.setState({\n          score:  this.state.score + 1,\n          vampires: update(this.state.vampires, {[i]: {clicked: {$set: true}}}),\n          headerText: \"You guessed correct!\"\n        })\n\n\n      } else {\n\n        if(this.state.score > this.state.topScore){\n          this.setState({\n            topScore: this.state.score,\n            score: 0,\n            headerText: \"You guessed incorrect!\",\n            vampires\n          },\n          () => {\n            console.log('Updated new top score!')\n          });\n\n        }\n\n        if(this.state.score <= this.state.topScore){\n          this.setState({\n            score: 0,\n            headerText: \"You guessed incorrect!\",\n            vampires\n          },\n          () => {\n            console.log('Reset, did not beat the top score!')\n          });\n        }\n\n      }\n\n   }\n  }\n\n\n};\n\n// shuffle array function so that vampires are rendered in a random order each time on render.\nshuffleArray = array => {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n  render() {\n\n    //map the vampires stored in the component state and set them each up in a component with props\n\n    let characterCards = this.state.vampires.map((vampire) =>\n      <VampCard\n        name = {vampire.name}\n        image = {vampire.image}\n        key = {vampire.id}\n        id = {vampire.id}\n        handleClick = {this.handleClick}\n      />\n    )\n\n    //shuffle the vampires array, so that they can be in a random order each time the site renders\n\n    let shuffledCards = this.shuffleArray(characterCards)\n\n    return (\n      \n    <div>\n\n    <Header score={this.state.score} topScore = {this.state.topScore} headerText = {this.state.headerText}/>\n      <Wrapper>\n        {shuffledCards}\n      </Wrapper>\n    <Footer/>\n\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}